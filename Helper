({
	getAccountData : function(component){
        //Load the Account data from apex
        var action = component.get("c.getAccounts");
        var toastReference = $A.get("e.force:showToast");

        action.setCallback(this,function(response){
            var state = response.getState();
            if(state == "SUCCESS"){
                
                
                    //Setting data to be displayed in table
                    var rows = response.getReturnValue();
                console.log('====>'+JSON.stringify(rows));
                    for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        row.linkName = '/'+row.Id;
                        if (row.Owner) row.OwnerName = row.Owner.Name;
                    }
            component.set('v.accountData', rows);
                component.set('v.FilterAccountData', rows);
                    //component.set("v.accountData",accountWrapper);
                
                   /**toastReference.setParams({
                        "type" : "Success",
                        "title" : "Success",
                        "message" : accountWrapper.message,
                        "mode" : "dismissible"
                    });
                } // handle server side erroes, display error msg from response 
                else{
                    toastReference.setParams({
                        "type" : "Error",
                        "title" : "Error",
                        "message" : accountWrapper.message,
                        "mode" : "sticky"
                    }); 
                }
            } // handel callback error 
            else{
                toastReference.setParams({
                    "type" : "Error",
                    "title" : "Error",
                    "message" : 'An error occurred during initialization '+state,
                    "mode" : "sticky"
                });
            }
            toastReference.fire();*/
                    
                
            }
        });
        $A.enqueueAction(action);
    },
    
    sortData : function(component,fieldName,sortDirection){
        var data = component.get("v.FilterAccountData");
        //function to return the value stored in the field
        var key = function(a) { return a[fieldName]; }
        var reverse = sortDirection == 'asc' ? 1: -1;
        
        // to handel number/currency type fields 
        if(fieldName == 'AnnualRevenue'){ 
            data.sort(function(a,b){
                var a = key(a) ? key(a) : '';
                var b = key(b) ? key(b) : '';
                return reverse * ((a>b) - (b>a));
            }); 
        }
        else{// to handel text type fields 
            data.sort(function(a,b){ 
                var a = key(a) ? key(a).toLowerCase() : '';//To handle null values , uppercase records during sorting
                var b = key(b) ? key(b).toLowerCase() : '';
                return reverse * ((a>b) - (b>a));
            });    
        }
        //set sorted data to accountData attribute
        component.set("v.FilterAccountData",data);
    },
    
    editRecord: function (component, row) {
       var action = component.get("c.checkingAccountAccess");
        action.setParams({"strAccRecId" : row });
        action.setCallback(this,function(response){
            var state = response.getState();
            console.log('state====>'+state);
            if(state == "SUCCESS"){
                var accountWrapper = response.getReturnValue();
                console.log('accountWrapper====>'+accountWrapper);
            }
        });
        $A.enqueueAction(action);
    },
    
    editRecord: function (component, row) {
       var action = component.get("c.checkingAccountAccess");
        action.setParams({"strAccRecId" : row });
        action.setCallback(this,function(response){
            var state = response.getState();
            console.log('state====>'+state);
            if(state == "SUCCESS"){
                var accountWrapper = response.getReturnValue();
                if(response.getReturnValue() == true){
                 var editRecordEvent = $A.get("e.force:editRecord");
                     editRecordEvent.setParams({"recordId": row});
                    editRecordEvent.fire();
                }else {
                    
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        title : 'Info',
                        message: 'You have only read access to this account.',
                        duration:' 5000',
                        key: 'info_alt',
                        type: 'info',
                        mode: 'dismissible'
                    });
                    toastEvent.fire();
                }
                console.log('accountWrapper====>'+accountWrapper);
            }
        });
        $A.enqueueAction(action);
    },
    
    viewAction: function (component, row) {
       var navEvt = $A.get("e.force:navigateToSObject");
       navEvt.setParams({
         "recordId": row.Id,
          "slideDevName": "detail"
        });
       navEvt.fire();
    }
})
